<?xml version="1.0" encoding="UTF-8"?>   
<!--
Android平台构建apk包步骤：

签名生成步骤：
	1.运行KeyGen.bat，在当前目录下生成wd.keystore。
		注：
		(1)生成wd.keystore时需要输入密码时统一输入"wondertek"
		(2)需要输入名称时统一输入"wd"
		(3)最后确认时输入：y
	2.wd.keystore的有效期为36000年(100年)，所以目前不需要重新生成wd.keystore

build.xml完成的具体环节：
	
    1.用aapt生成R.java   
   
    2.JAVAC编译JAVA文件   
   
    3.批处理生成classes.dex   
   
    4.aapt打包资源    
   
    5.apkbuilder包资源和类文件为APK文件   
   
    6.jarsinger 对APK进行签名

运行build.xml:
	在CMD中直接运行ant，如下：
	>ant -file {工程路径}\build.xml
	
-->   
   
<project name="Venus" default="install" basedir=".">   
   
    <property file="local.properties" />   
	
	<!--需要定制的参数 开始-->
	
	<!--  第3方开发包目录 -->
    <property name="venusExternalJAR" value="${basedir}/lib" />
	
	<!-- 包名对应的路径名 -->
	<property name="packagepath" value="com/wondertek/mobilevideo3" />
	
	<!-- Android的API版本 -->
	<property name="target.version" value="7" />
	
	<!-- Android的SDK路径 -->
	<property name="sdk" value="D:/Program Files/android-sdk-windows" />
	
	<!-- JDK路径 -->
	<property name="jdk-home" value="C:/Program Files/Java/jdk1.6.0_22" />
	
	<!-- 需要定制的参数 结束-->
   
    <!-- 定义自己的输出目录 -->   
   
    <property name="outdir" value="out" />   
   
    <property name="out.absolute.dir" location="${outdir}" />   
   
    <!-- 定义 R.java 所有目录 -->   
   
    <property name="outdir-gen" value="gen" />   
   
    <!-- 读取目录 -->   
   
    <property name="resource-dir" value="res" />
   
    <property name="asset-dir" value="assets" />   
   
    <property name="src-dir" value="src" />   
   
    <property name="native-dir" value="libs" />   
   
    <property name="src-dir-ospath" value="${basedir}/${src-dir}" />   
	
    <property name="native-dir-ospath" value="${basedir}/${native-dir}" />    
   
    <!-- 输出目录 -->   
   
    <property name="outdir-classes" value="${outdir}/classes" />   
   
    <property name="out.classes.absolute.dir" location="${outdir-classes}" />   
   
    <!-- 临时类资源文件 -->   
   
    <property name="dex-file" value="classes.dex" />   
   
    <property name="intermediate-dex" value="${out.absolute.dir}/${dex-file}" />   
   
    <!-- 最终生成文件 -->   
   
    <property name="out-package" value="${outdir}/${ant.project.name}.apk" />   
   
    <!-- 要使用的工具 --> 
	<property name="android-framework-aidl" value="${sdk}/platforms/android-${target.version}/framework.aidl" />
	<property name="sdk-platform" value="${sdk}/platforms/android-${target.version}" />
	<property name="sdk-platform-tools" value="${sdk-platform}/tools" />
	<property name="sdk-tools" value="${sdk}/tools" />
	 
    <property name="aapt" value="${sdk-platform-tools}/aapt.exe" />   
   
    <property name="aidl" value="${sdk-platform-tools}/aidl.exe" />   
   
    <property name="dx" value="${sdk-platform-tools}/dx.bat" />   
   
    <property name="adb" value="${sdk-tools}/../platform-tools/adb" />   
   
    <property name="apk-builder" value="${sdk-tools}/apkbuilder.bat" />   
   
    <property name="android-jar" value="${sdk-platform}/android.jar" />   
   
    <!-- 最终生成各种包文件 -->   
   
    <property name="resources-package" value="${outdir}/${ant.project.name}" />   
   
    <property name="resources-package-ospath" value="${basedir}/${resources-package}" />   
   
    <property name="out-unsigned-package" value="${outdir}/${ant.project.name}-unsigned.apk" />   
   
    <property name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" />   
   
    <property name="out-signed-package" value="${outdir}/${ant.project.name}-signed.apk" />   
   
    <property name="out-signed-package-ospath" value="${basedir}/${out-signed-package}" />   
   
    <property name="zipalign-package-ospath" value="${basedir}/${outdir}/${ant.project.name}.apk" />   
   
   
    <!--签名工具-->   
	
    <property name="jarsigner" value="${jdk-home}/bin/jarsigner.exe" />   
   
    <!--优化APK工具-->   
   
    <property name="zipalign" value="${sdk-tools}/zipalign.exe" />   
   
	<!-- 定义classpath 指明所用到的jar包、class 文件存放的位置 --> 
    <path id="master-classpath"> 
        <fileset file="${venusExternalJAR}/*.jar" /> 
    </path> 

    <!-- 初始化 -->   
   
    <target name="init" description="Init the directory of working...">   
   
        <echo>Creating all output directories </echo>   
   
        <delete dir="${outdir}" />   
   
        <delete dir="${outdir-classes}" />   
   
        <delete dir="${outdir-gen}" />   
   
        <mkdir dir="${outdir}" />   
   
        <mkdir dir="${outdir-classes}" />   
   
        <mkdir dir="${outdir-gen}" />   
   
    </target>   
   
    <!--步骤 1： aapt生成R.java -->   
   
    <target name="resource-src" depends="init" description="Generating R.java...">   
   
        <echo>Generating R.java...</echo>   
   
        <exec executable="${aapt}" failonerror="true">   
   
            <arg value="package" />   
   
            <arg value="-m" />   
   
            <arg value="-J" />   
   
            <arg value="${outdir-gen}" />   
   
            <arg value="-M" />   
   
            <arg value="AndroidManifest.xml" />   
   
            <arg value="-S" />   
   
            <arg value="${resource-dir}" />   
   
            <arg value="-I" />   
   
            <arg value="${android-jar}" />   
   
        </exec>   
   
    </target>   
   
    <!-- Generate java classes from .aidl files. -->   
   
    <target name="aidl" depends="init" description="Compiling aidl files into Java classes...">   
   
        <echo>Compiling aidl files into Java classes...</echo>   
   
        <apply executable="${aidl}" failonerror="true">   
   
            <arg value="-p${android-framework-aidl}" />   
   
            <arg value="-I${src-dir}" />   
   
            <fileset dir="${src-dir}">   
   
                <include name="**/*.aidl" />   
   
            </fileset>   
   
        </apply>   
   
    </target>   
   
    <!-- 步骤 2. 编译所有class文件. -->   
    <target name="compile" depends="init, resource-src, aidl" description="Compile all SOURCES java..."> 
        <javac verbose="true" encoding="UTF-8" target="1.6" debug="true" extdirs="" srcdir="./src" destdir="${outdir-classes}" bootclasspath="${android-jar}">
        	<classpath refid="master-classpath" /> 
		</javac>
    	<echo>Compile all java over...</echo>   
    </target>   
   
    <!-- 混淆代码-->
   
    <target name="proguard" depends="compile">   

        <jar basedir="${outdir-classes}" destfile="temp.jar" />   
<!--
        <java jar="proguard.jar" fork="true" failonerror="true">   

            <jvmarg value="-Dmaximum.inlined.code.length=32" />   
   
            <arg value="-injars temp.jar" />   
   
            <arg value="-outjars optimized.jar" />   
   
            <arg value="-libraryjars ${android-jar}" />   
   
            <arg value="-dontpreverify" />   
   
            <arg value="-dontoptimize" />   
   
            <arg value="-dontusemixedcaseclassnames" />   
   
            <arg value="-repackageclasses ''" />   
   
            <arg value="-allowaccessmodification" />   
-->   		
            <!-- 要保留自己的主ACTIVITY类 -->   
<!--
            <arg value="-keep public class com.wondertek.video.VenusActivity" />   
   
            <arg value="-optimizationpasses 7" />   
   
            <arg value="-verbose" />   
   
            <arg value="-dontskipnonpubliclibraryclasses" />   
   
            <arg value="-dontskipnonpubliclibraryclassmembers" />   

        </java>   
-->   
        <delete file="temp.jar" />   
<!--   
        <delete dir="${outdir-classes}" />   
   
        <mkdir dir="${outdir-classes}" />   
   
        <unzip src="optimized.jar" dest="${outdir-classes}" />   
   
        <delete file="optimized.jar" />   
-->   
    </target>   
   
    <!-- 步骤 3. 转换class文件为dex文件. -->   
   
    <target name="dex" depends="proguard">   
   
        <echo>Converting compiled files into ${intermediate-dex}... </echo>   
        <unzip src="${venusExternalJAR}/MapApi.jar" dest="${basedir}" />
        <unzip src="${venusExternalJAR}/MapApi.jar" dest="${outdir-classes}" />
        <unzip src="${venusExternalJAR}/wonderplayer_v1.3.jar" dest="${outdir-classes}" />
        <unzip src="${venusExternalJAR}/core.jar" dest="${outdir-classes}" />
        <exec executable="${dx}" failonerror="true">   
   
            <arg value="--dex" />   
   
            <arg value="--output=${intermediate-dex}" />   
   
            <arg path="${out.classes.absolute.dir}" />   
   
        </exec>   
   
    </target>   
   
    <!-- 步骤 4. 将资源和清单打包. -->   
   
    <target name="package-res-and-assets">   
   
        <echo>Packaging resources and assets...</echo>   
   
        <exec executable="${aapt}" failonerror="true">   
   
            <arg value="package" />   
   
            <arg value="-f" />   
   
            <arg value="-M" />   
   
            <arg value="AndroidManifest.xml" />   
   
            <arg value="-S" />   
   
            <arg value="${resource-dir}" />   
   
            <arg value="-A" />   
   
            <arg value="${asset-dir}" />   
   
            <arg value="-I" />   
   
            <arg value="${android-jar}" />   
   
            <arg value="-F" />   
   
            <arg value="${resources-package}" />   
   
        </exec>   
   
    </target>   
   
    <!-- 步骤 5. 将打好的包编译为APK文件. -->   
   
    <target name="debug" depends="dex, package-res-and-assets">   
   
        <echo>release:Packaging ${out-debug-package-ospath}, and signing it with a debug key...</echo>   
   
        <exec executable="${apk-builder}" failonerror="true">   
   
            <arg value="${out-unsigned-package-ospath}" />   
   
            <arg value="-u" />   
   
            <arg value="-z" />   
   
            <arg value="${resources-package-ospath}" />   
   
            <arg value="-f" />   
   
            <arg value="${intermediate-dex}" />   
   
            <arg value="-rf" />   
   
            <arg value="${src-dir-ospath}" />   
			
			<arg value="-nf" />   
   
            <arg value="${native-dir-ospath}" /> 
   
        </exec>   
   
    </target>   
   
    <!--步骤 6. 签名APK文件 -->   
	<property name="keyAlias" value="wd" />
	<property name="keyStore" value="${basedir}/wd.keystore" />
	<property name="keyPWD" value="wondertek" />

	<target name="jarsigner" depends="debug">   
   
        <echo> jarsigner ${out-signed-package-ospath}</echo>   
   
        <exec executable="${jarsigner}" failonerror="true">   
   
            <arg value="-verbose" />   
   
            <arg value="-storepass" />   
   
            <arg value="${keyPWD}" />   
   
            <arg value="-keystore" />   
   
            <arg value="${keyStore}" />   
   
            <arg value="-signedjar" />   
   
            <arg value="${out-signed-package-ospath}" />   
   
            <arg value="${out-unsigned-package-ospath}" />   
   
            <arg value="${keyAlias}" />   
   
        </exec>   
   
    </target>   
   
    <!--zipalign优化android程序-->   
   
    <target name="zipalign" depends="jarsigner">   
   
        <echo> zipalign ${zipalign-package-ospath}</echo>   
   
        <exec executable="${zipalign}" failonerror="true">   
   
            <arg value="-v" />   
   
            <arg value="-f" />   
   
            <arg value="4" />   
   
            <arg value="${out-signed-package-ospath}" />   
   
            <arg value="${zipalign-package-ospath}" />   
   
        </exec>  
		
		<copy todir="${basedir}/bin/">
			<fileset file="${zipalign-package-ospath}"/>
		</copy>
		
		
   
    </target>   
   
    <!-- 安装到默认的手机或模拟器-->   
   
    <target name="install" depends="zipalign">
		<echo>Build ~/bin/${ant.project.name}.apk finished...</echo> 
   <!--   
        <echo>Installing ${out-debug-package} onto default emulator...</echo>   

        <exec executable="${adb}" failonerror="true">   
   
            <arg value="install" />   
   
            <arg value="${out-signed-package}" />   
   
        </exec>   
   -->
    </target>   
   
</project>  
